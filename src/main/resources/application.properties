tailormap-api.version=@project.version@
tailormap-api.apiVersion=@info.version@
tailormap-api.commitSha=@git.commit.id@
tailormap-api.builddate=@maven.build.timestamp@
tailormap-api.name=@project.artifactId@

# page size for features
tailormap-api.pageSize=100
# whether the api should attempt to provide exact feature counts for all WFS requests
# may result in double query execution, once for counting and once for the actual data
tailormap-api.features.wfs_count_exact=false
# true when to skip geometry while serializing features, does not affect highlight geometry
tailormap-api.features.skip_geometry_output=true

# whether the API should use GeoTools "Unique Collection" (use DISTINCT in SQL statements) or just retrieve all
# values when calculating the unique values for a property.
# There might be a performance difference between the two, depending on the data
tailormap-api.unique.use_geotools_unique_function=true

# base url
server.servlet.context-path=@servers.variables.basePath.default@

spring.main.banner-mode=off
spring.application.name==@project.artifactId@

# database
spring.datasource.url=jdbc:postgresql://127.0.0.1/tailormap
spring.datasource.username=tailormap
spring.datasource.password=tailormap
#spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver
spring.datasource.pool-size=30

#
# Note: because we are using a persistence.xml file these properties are
# also/explicitly set in the JPAConfiguration class
#
# spring.jpa.show-sql=true
# enable Hibernate Metrics
spring.jpa.open-in-view=false
spring.jpa.show-sql=true
# For dev temporarily
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.enable_metrics=true
spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=true

# actuator
management.endpoints.enabled-by-default=false
# provide mappings
# management.endpoint.mappings.enabled=true
# management.endpoints.web.exposure.include=info,health,metrics,prometheus,loggers,logfile,mappings
management.endpoints.web.exposure.include=info,health,metrics,prometheus,loggers,logfile
# we don't have a logfile configured, so this will return 404
management.endpoint.logfile.enabled=true
# NOTE this `loggers` is an endpoint that can change the configuration while running using POST requests
management.endpoint.loggers.enabled=true
management.endpoint.info.enabled=true
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.tags.application=${tailormap-api.name}
management.metrics.export.prometheus.enabled=true
management.metrics.export.prometheus.descriptions=true

# tailormap specific health checks
management.health.tailormap.enabled=true
management.server.port=8081
management.server.base-path=/api
# TODO set up security
# management.endpoint.health.show-details=when_authorized
# management.endpoint.health.roles=

logging.level.org.springframework.boot=INFO
logging.level.org.springframework.boot.autoconfigure=INFO
logging.level.org.springframework.test.context=INFO

logging.level.org.hibernate=INFO
logging.level.org.hibernate.SQL=INFO
# no hibernate session metrics in the log
logging.level.org.hibernate.engine.internal.StatisticalLoggingSessionEventListener=OFF
# we don't use jTDS
logging.level.org.geotools.data.sqlserver.jtds=OFF

logging.level.nl.b3p.tailormap.api=TRACE
