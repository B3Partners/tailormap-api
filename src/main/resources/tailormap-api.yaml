#
# Copyright (C) 2021 B3Partners B.V.
#
# SPDX-License-Identifier: MIT
#
openapi: 3.0.3

info:
  title: 'Tailormap API'
  description: '
  Tailormap API contains the calls necessary to draw a basic map on the screen.
  This API will be augmented with component specific API calls that can retrieve
  and or manipulate data.
  
  Note: you need to send an X-XSRF-TOKEN header with the value from the XSRF-TOKEN
  cookie for non-GET requests. The Angular HttpClient does this automatically.
  '
  contact:
    name: 'B3Partners BV'
    url: 'https://www.b3partners.nl/'
    email: 'info@b3partners.nl'
  license:
    name: 'MIT'
    url: 'https://mit-license.org/'
  version: 'v1'
servers:
  - description: 'development server'
    url: 'http://localhost:{port}{basePath}'
    variables:
      port:
        enum:
          - '8080'
          - '443'
          - '8443'
        default: '8080'
        description: 'port number'
      basePath:
        description: base path
        default: '/api'
  - description: 'test server'
    url: 'https://snapshot.tailormap.nl{basePath}'
    variables:
      basePath:
        description: base path
        default: '/api'

components:
  securitySchemes:
    formAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID

  schemas:

    MapResponse:
      description: 'Any information needed to draw a basic map on a page. May include base layers.'
      type: object
      properties: # mostly properties from table "application"
        initialExtent:
          description: 'initial bounds for the map'
          $ref: './model.yaml#/components/schemas/Bounds'
          nullable: true
        maxExtent:
          description: 'maximum bounds for the map'
          $ref: './model.yaml#/components/schemas/Bounds'
          nullable: true
        services: # TODO in the current implementation this is an object with the id of a service as elemnt
          #      eg. "1": {"protocol": "tiled", "matrixSets":[], "id": 1
          #      an array seems the better option
          # TODO Not sure we actually/still need this...
          type: array
          uniqueItems: true
          items:
            $ref: './model.yaml#/components/schemas/Service'
        baseLayerTreeNodes:
          description: 'Unordered list of all tree nodes of base layers. Start with the node with root set to true and 
            use the ordered children array property to order the tree. For base layers, only one child node (with all
            its'' child layers) of the root should be displayed at one time.'
          type: array
          items:
            $ref: './model.yaml#/components/schemas/LayerTreeNode'
        layerTreeNodes:
          description: 'Unordered list of all tree nodes of overlay/thematic/transparent layers. Start with the node 
            with root set to true and use the ordered children array property to order the tree.'
          type: array
          items:
            $ref: './model.yaml#/components/schemas/LayerTreeNode'
        appLayers:
          description: 'Unordered list of all AppLayers referenced from baseLayerTreeNodes and layerTreeNodes. Note that
            you need to lookup these by id, but OpenAPI only supports a map by using strings as keys, so an array is 
            used instead.'
          type: array
          items:
            $ref: './model.yaml#/components/schemas/AppLayer'
        crs:
          $ref: './model.yaml#/components/schemas/CoordinateReferenceSystem'
      required:
        - initialExtent
        - services
        - baseLayerTreeNodes
        - layerTreeNodes
        - appLayers
        - crs

    Layers:
      description: 'An array of app layers.'
      type: array
      minLength: 0
      items:
        $ref: './model.yaml#/components/schemas/AppLayer'


    ComponentsResponse:
      description: '
      Provides the collection of configured components (controls) for the application.
      Note that default/built-in components do not have to be retrieved.
      '
      type: array
      # 0, because there are a number of default components always loaded eg. mapcomponent, zoom, pan...
      # also, since layout is fixed, that information is no longer needed
      minLength: 0
      items:
        $ref: './model.yaml#/components/schemas/Component'

    AppResponse:
      description: 'Answers API version and (default|requested) application id.'
      type: object
      properties:
        id:
          description: 'application id'
          type: integer
          format: int64
          example: 7
        apiVersion:
          type: string
          default: 'v1'
        name:
          type: string
        version:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        lang:
          description: 'language code'
          type: string
          enum:
            - 'nl_NL'
            - 'en_US'
          default: 'nl_NL'
        styling:
          description: 'styling information such as support- and backing colours etc.'
          type: object
          additionalProperties:
            type: string

    FeaturesResponse:
      description: 'A -possibly empty- list of features with requested attributes and presentation metadata'
      type: object
      required: [
        features,
        columnMetadata
      ]
      properties:
        total:
          description: '
            the total number of available features, can be an estimated value. 
            Can be missing when unknown or irrelevant (eg. featureinfo request)
          '
          type: integer
          nullable: true
        page:
          description: 'current page, this will allow the client to request the next or previous page by adding or removing 1 or more'
          type: integer
          nullable: true
          minimum: 1
        pageSize:
          description: 'number of features in a page, this will allow calculating the offset (page * pagesize)'
          type: integer
          nullable: true
          readOnly: true
          default: 100
          minimum: 1
        features:
          description: 'list of features. When the pagenumber*pagesize exceeds the number of features this list will be empty'
          type: array
          minLength: 0
          items:
            $ref: './model.yaml#/components/schemas/Feature'
        columnMetadata:
          description: 'presentation metadata'
          type: array
          minLength: 0
          items:
            $ref: './model.yaml#/components/schemas/ColumnMetadata'
      example:
        total: 400
        page: 5
        pageSize: 100
        features: []
        columnMetadata: []


paths:
  /version:
    summary: 'Provides version information of the backend'
    get:
      operationId: 'getVersion'
      summary: 'Provides version information of the backend'
      security: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              example:
                version: '0.1-SNAPSHOT'
                databaseversion: '49'
                apiVersion: 'v1'


  /login:
    summary: 'form login url'
    post:
      operationId: 'login'
      summary: 'Logs in and returns the authentication cookie'
      security: []
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/x-www-form-urlencoded:
            schema:
              title: 'login'
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: '
            Successfully authenticated. The session ID is returned in a cookie named `JSESSIONID`. 
            You need to include this cookie in subsequent requests.
            '
          headers:
            Set-Cookie:
              schema:
                type: string
                # TODO need to set 'SameSite' and 'Secure'
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '403':
          description: 'Authentication failed'


  /app/:
    description: 'Will return general setup information such as name, appId, language, but not map specific information.'
    get:
      operationId: 'validateApp'
      description: '
        Use this endpoint to get the id of the requested or default application.
        Either call this with `name` and optional `version` or `appId` alone.
        '
      security:
        - formAuth: [ ]
      parameters:
        - description: 'app name from applications list'
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: 'version from applications list'
          in: query
          name: version
          required: false
          schema:
            type: string
        - description: 'app id from application table'
          in: query
          name: appId
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'OK. Application exists.'
          content:
            application/json:
              example:
                id: 7
                apiVersion: 'v1'
                name: 'cool app'
                version: '2'
                title: 'This is a cool mapping app'
                lang: 'nl_NL'
              schema:
                $ref: '#/components/schemas/AppResponse'
        '401':
          description: 'Authentication required.'
          content:
            application/json:
              schema: # not an actual HTTP redirect, but  provides login url
                # we need to rethink login mechanism eg. a login form popover in the
                # application that is shown on this status
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
              example:
                code: 401
                message: 'login required'
                url: '/login'
        '403':
          description: 'Access denied'
          content:
            application/json:
              example:
                code: 403
                message: 'Access denied'
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
        '404':
          description: '
          The specified application was not found,
          Use the `url` from the response to get the default application.
          '
          content:
            application/json:
              example:
                code: 404
                message: 'Application not found'
                url: /app/?appId=1
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'


  /app/{appId}/map:
    get:
      description: 'Retrieve the map''s bounding box, projection, language and (optional) base layers.
        This document provides all that is necessary to draw a map with (optional) baselayers.'
      operationId: 'getMap'
      security:
        - formAuth: [ ]
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'OK'
          content:
            application/json: # TODO
              # example:
              schema:
                $ref: '#/components/schemas/MapResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
        '500':
          description: 'Error'
          content:
            application/json:
              example:
                code: 500
                message: 'Internal server error'
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'


  /app/{appId}/components:
    get:
      summary: 'Retrieve all configured components'
      operationId: 'getComponents'
      security:
        - formAuth: [ ]
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json: # TODO
              # example:
              schema:
                $ref: '#/components/schemas/ComponentsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'


  /app/{appId}/layer/{layerId}/describe:
    description: '
    Returns metadata and featuretype of the requested app layer, aka. layer details
    '
    get:
      operationId: 'describeLayer'
      description: 'provides layer details'
      security:
        - formAuth: [ ]
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './model.yaml#/components/schemas/LayerDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'


  /app/{appId}/layer/{layerId}/features:
    summary: 'Use this endpoint to access features.'
    get:
      operationId: 'getFeatures'
      description: 'retrieve features that fulfill the requested conditions (parameters).'
      security:
        - formAuth: [ ]
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'application layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'x-coordinate, assumed in the coordinate reference system of the attribute source if crs is omitted'
          in: query
          name: x
          required: false
          schema:
            type: number
        - description: 'y-coordinate, assumed in the coordinate reference system of the attribute source if crs is omitted'
          in: query
          name: y
          required: false
          schema:
            type: number
        - description: 'EPSG code for the given x- and y-coodinates, the backend will transform to attribute source if required'
          in: query
          name: crs
          required: false
          schema:
            type: number
        - description: 'buffer radius in the coordinate reference system of the attribute source'
          in: query
          name: distance
          required: false
          schema:
            type: number
            default: 4
        - description: 'feature id, the unique and immutable identifier of a feature within an attribute source'
          in: query
          name: __fid
          required: false
          schema:
            type: string
        - description: 'request true to have simplified geometries returned'
          in: query
          name: simplify
          required: false
          schema:
            type: boolean
            default: false
        - description: 'a filter to be applied, possibly in combination with any other request parameters'
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: '
            Page number to retrieve. For the initial request this should be 1 which will 
            then give the pageSize and total of features so addintional pages can be retrieved.'
          in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesResponse'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed are incomplete.'
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
    # TODO elaborate design
    post:
      operationId: 'editFeature'
      description: 'update a feature'
      security:
        - formAuth: [ ]
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'application layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: 'Not Implemented'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
    # TODO elaborate design
    put:
      operationId: 'createFeature'
      description: 'create a new feature'
      security:
        - formAuth: [ ]
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'application layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: 'Not Implemented'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
    # TODO elaborate design
    delete:
      operationId: 'deleteFeature'
      security:
        - formAuth: [ ]
      description: 'delete a feature'
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'application layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: 'Not Implemented'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'