name: Ubuntu Maven build

env:
  MAVEN_OPTS: -Djava.awt.headless=true
  PGPASSWORD: tailormap
  PGUSER: tailormap
  PGDATABASE: tailormap

concurrency:
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ github.workflow }}-${{ ( github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' ) && format('ci-master-{0}', github.sha) || format('ci-master-{0}', github.ref) }}
  cancel-in-progress: true

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "16 23 * * 0"

jobs:
  build:
    name: Build w/ Java 11
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Priming build with Maven
        run: mvn -B -V -fae -DskipTests -DskipITs -DskipQA=true install

      - name: Test with Maven
        run: |
          mvn -B -fae -e test
          mvn -B -fae -e verify

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          verbose: true

      - name: Build javadoc
        run: mvn javadoc:javadoc

      - name: Build Maven site
        run: mvn site

      - name: Archive Maven Site
        if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
        id: archive-site
        uses: actions/upload-artifact@v3
        with:
          name: archive-site
          retention-days: 2
          path: target/site/

  postgresql-test:
    name: PostgreSQL verify
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Get Docker compose for database
        uses: actions/checkout@v3
        with:
          repository: 'B3Partners/tailormap-viewer'
          ref: main
          path: 'tailormap-viewer'
          fetch-depth: 1
          lfs: true

      - name: start config database
        env:
          DB_PORT: '5432:5432'
        run: |
          docker compose -f ./tailormap-viewer/docker-compose.yml -f ./tailormap-viewer/docker-compose-db-ports.yml up -d --build db

      - name: 'Login to b3p.nl'
        uses: docker/login-action@v2
        with:
          registry: docker.b3p.nl
          username: ${{ secrets.DOCKER_B3P_PULL_ACTOR }}
          password: ${{ secrets.DOCKER_B3P_PULL_TOKEN }}

      - name: start gisdata databases
        env:
          APP_USER_PASSWORD: 980f1c8A-25933b2
          GEODATA_PASSWORD: 980f1c8A-25933b2
        run: ./build/ci/testdata-setup.sh

      - name: Test PostgreSQL with Maven
        run: |
          mvn -B -fae -e -DskipQA=true -Pqa-skip -Ddocker.skip=true -Ppostgresql verify 

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          verbose: true

  site-deploy:
    name: Publish gh-pages
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    steps:
      - uses: actions/checkout@v3

      - name: Download Maven Site
        uses: actions/download-artifact@v3
        with:
          name: archive-site
          path: target/site

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: target

      - name: Deploy gh-pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: target/site


  publish:
    name: Deploy artifacts
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: write
      contents: read
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Build and Push
        # no need to run any QC or tests
        # note deploy will deploy both Maven artifact as well as Docker image
        env:
          B3P_DEPLOY_ACTOR: ${{ secrets.B3P_DEPLOY_ACTOR }}
          B3P_DEPLOY_TOKEN: ${{ secrets.B3P_DEPLOY_TOKEN }}
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -B -V -fae -DskipTests -DskipITs -DskipQA=true -Pqa-skip clean deploy --settings .github/maven-settings.xml

  deploy:
    name: Deploy stack
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      actions: write
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Deploy compose stack
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GHCR_CLEANUP_PAT }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'B3Partners',
              repo: 'tailormap-viewer',
              workflow_id: 'test-and-deploy.yml',
              ref: 'main'
            })


  docker-test:
    name: Test docker image
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'pull_request' }}
    env: # these defaults are also in the respective TM images
      PG_PORT: 5432
      DB_NAME: tailormap
      DB_USER: tailormap
      DB_PASS: tailormap

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASS }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 15s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Build docker image
        run: mvn -B -V -fae -DskipTests -DskipITs -DskipQA=true -Pqa-skip package

      - name: Init database w/ Tailormap Admin
        # use Tailormap Admin to initialize the PostgreSQL database schema
        run: |
          docker run -d --name tailormap-admin -h tailormap-admin --network host ghcr.io/b3partners/tailormap-admin:snapshot
          sleep 60
          docker logs tailormap-admin
          docker stop tailormap-admin
      - name: Try Created Docker image
        run: |
          docker run -d --name tailormap-api -h tailormap-api --network host ghcr.io/b3partners/tailormap-api:snapshot
          sleep 60
          docker logs tailormap-api
          curl http://localhost:8080/api/actuator/health
          curl http://localhost:8080/api/version


  cleanup:
    name: Maven cache cleanup
    if: ${{ always() }}
    needs: [ build, publish, postgresql-test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Cleanup snapshot cache
        run: |
          find ~/.m2/repository -name "*SNAPSHOT*" -type d | xargs rm -rf {}
