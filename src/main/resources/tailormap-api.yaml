#
# Copyright (C) 2021 B3Partners B.V.
#
# SPDX-License-Identifier: MIT
#
openapi: 3.0.3

info:
  title: 'Tailormap API'
  description: '
  Tailormap API contains the calls necessary to draw a basic map on the screen.
  This API will be augmented with component specific API calls that can retrieve
  and or manipulate data.
  '
  contact:
    name: 'B3Partners BV'
    url: 'https://www.b3partners.nl/'
    email: 'info@b3partners.nl'
  license:
    name: 'MIT'
    url: 'https://mit-license.org/'
  version: 'v1'
servers:
  - description: 'development server'
    url: 'http://localhost:{port}{basePath}'
    variables:
      port:
        enum:
          - '8080'
          - '443'
          - '8443'
        default: '8080'
        description: 'port number'
      basePath:
        description: base path
        default: '/api'

components:
  schemas:

    MapResponse:
      description: 'Any information needed to draw a basic map on a page. May include base layers.'
      type: object
      properties: # mostly properties from table "application"
        initialExtent:
          description: 'initial bounds for the map'
          $ref: './model.yaml#/components/schemas/Bounds'
          nullable: true
        maxExtent:
          description: 'maximum bounds for the map'
          $ref: './model.yaml#/components/schemas/Bounds'
          nullable: true
        services: # TODO in the current implementation this is an object with the id of a service as elemnt
          #      eg. "1": {"protocol": "tiled", "matrixSets":[], "id": 1
          #      an array seems the better option
          # TODO Not sure we actually/still need this...
          type: array
          items:
            $ref: './model.yaml#/components/schemas/Service'
        baseLayers:
          type: array
          items:
            $ref: './model.yaml#/components/schemas/AppLayer'
        crs:
          $ref: './model.yaml#/components/schemas/CoordinateReferenceSystem'


    Layers:
      description: 'An array of app layers.'
      type: array
      minLength: 0
      items:
        $ref: './model.yaml#/components/schemas/AppLayer'


    ComponentsResponse:
      description: '
      Provides the collection of configured components (controls) for the application.
      Note that default/built-in components do not have to be retrieved.
      '
      type: array
      # 0, because there are a number of default components always loaded eg. mapcomponent, zoom, pan...
      # also, since layout is fixed, that information is no longer needed
      minLength: 0
      items:
        $ref: './model.yaml#/components/schemas/Component'

    AppResponse:
      description: 'Answers API version and (default|requested) application id.'
      type: object
      properties:
        id:
          description: 'application id'
          type: integer
          format: int64
          example: 7
        apiVersion:
          type: string
          default: 'v1'
        name:
          type: string
        version:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        lang:
          description: 'language code'
          type: string
          enum:
            - 'nl_NL'
            - 'en_US'
          default: 'nl_NL'
        styling:
          description: 'styling information such as support- and backing colours etc.'
          type: object
          additionalProperties:
            type: string

    FeaturesResponse:
      description: 'A -possibly empty- list of features with requested attributes and presentation metadata'
      type: object
      properties:
        features:
          description: 'list of features'
          type: array
          minLength: 0
          items:
            $ref: './model.yaml#/components/schemas/Feature'
        columnMetadata:
          description: 'presentation metadata'
          type: array
          minLength: 0
          items:
            $ref: './model.yaml#/components/schemas/ColumnMetadata'
      example:
        features:

        columnMetadata:


paths:
  /version:
    summary: 'Provides version information of the backend'
    get:
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              example:
                version: '0.1-SNAPSHOT'
                databaseversion: '47'
                apiVersion: 'v1'

  /app:
    summary: '
    Use this endpoint to get the id of the requested or default application.
    Either call this with `name` and optional `version` or `appId` alone.
    Will return general setup information such as name, appId, language, but not map specific information.
    '
    get:
      parameters:
        - description: 'app name from applications list'
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: 'version from applications list'
          in: query
          name: version
          required: false
          schema:
            type: string
        - description: 'app id from application table'
          in: query
          name: appId
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'OK. Application exists.'
          content:
            application/json:
              example:
                id: 7
                apiVersion: 'v1'
                name: 'cool app'
                version: '2'
                title: 'This is a cool mapping app'
                lang: 'nl_NL'
              schema:
                $ref: '#/components/schemas/AppResponse'
        '401':
          description: 'Authentication required.'
          content:
            application/json:
              schema: # not an actual HTTP redirect, but  provides login url
                # we need to rethink login mechanism eg. a login form popover in the
                # application that is shown on this status
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
              example:
                code: 401
                message: 'login required'
                url: '/login'
        '403':
          description: 'Access denied'
          content:
            application/json:
              example:
                code: 403
                message: 'Access denied'
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
        '404':
          description: '
          The specified application was not found,
          Use the `url` from the response to get the default application.
          '
          content:
            application/json:
              example:
                code: 404
                message: 'Application not found'
                url: /app/?appId=1
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'


  /app/{appId}/map:
    summary: 'Retrieve the map''s bounding box, projection, language and (optional) base layers.
    This document provides all that is necessary to draw a map with (optional) baselayers.'
    get:
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'OK'
          content:
            application/json: # TODO
              # example:
              schema:
                $ref: '#/components/schemas/MapResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
        '500':
          description: 'Error'
          content:
            application/json:
              example:
                code: 500
                message: 'Internal server error'
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'

  /app/{appId}/components:
    summary: 'Retrieve all configured components'
    get:
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json: # TODO
              # example:
              schema:
                $ref: '#/components/schemas/ComponentsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'

  /app/{appId}/layers:
    summary: '
    Retrieve all configured layers.
    Provides all information to add foreground layers to the map and draw them.
    '
    get:
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layers'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'

  /app/{appId}/layers/{layerId}/describe:
    summary: '
    Returns metadata and featuretype of the requested app layer, aka. layer details
    '
    get:
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './model.yaml#/components/schemas/LayerDetails'

  /app/{appId}/layer/{layerId}/features:
    summary: 'Use this endpoint to access features.'
    get:
      description: 'retrieve features that fulfill the requested conditions (parameters).'
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'application layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'x-coordinate in the coordinate reference system of the attribute source'
          in: query
          name: x
          required: false
          schema:
            type: number
        - description: 'y-coordinate in the coordinate reference system of the attribute source'
          in: query
          name: y
          required: false
          schema:
            type: number
        - description: 'buffer radius in the coordinate reference system of the attribute source'
          in: query
          name: distance
          required: false
          schema:
            type: number
            default: 4
        - description: 'feature id, the unique and immutable identifier of a feature within an attribute source'
          in: query
          name: __fid
          required: false
          schema:
            type: string
        - description: 'request true to have simplified geometries returned'
          in: query
          name: simplify
          required: false
          schema:
            type: boolean
        - description: 'a filter to be applied, possibly in combination with any other request parameters'
          in: query
          name: filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesResponse'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed are incomplete.'
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './statusresponses.yaml#/components/schemas/ErrorResponse'
    post:
      # TODO elaborate design
      description: 'update a feature'
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'application layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: 'Not Implemented'
    put:
      # TODO elaborate design
      description: 'create a new feature'
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'application layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: 'Not Implemented'
    delete:
      # TODO elaborate design
      description: 'delete a feature'
      parameters:
        - description: 'application id'
          in: path
          name: appId
          required: true
          schema:
            type: integer
            format: int64
        - description: 'application layer id'
          in: path
          name: layerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: 'Not Implemented'